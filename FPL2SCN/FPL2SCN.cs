// <copyright file="FPL2SCN.cs" company="PlaceholderCompany">
// Copyright (c) PlaceholderCompany. All rights reserved.
// </copyright>

namespace VisualPointsNamespace
{
    using System.Xml;
    using BGLLibrary;
    using CommandLine;
    using Microsoft.Extensions.Configuration;
    using Serilog;
    using static BGLLibrary.Util;

    internal sealed class FPL2SCN
    {
        private static void Main(string[] args)
        {
            using var logger = new LoggerConfiguration()
                                    .WriteTo.Console()
                                    .WriteTo.Debug()
                                    .MinimumLevel.Debug()
                                    .CreateLogger();

            string outputFileName = Directory.GetCurrentDirectory() + "/SceneryProject/visualpoints/PackageSources/Scenery/visualpoints/visualpoints/visualpoints.xml";

            IConfiguration configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("fpl2scn.config", optional: false, reloadOnChange: true)
                .Build();

            IEnumerable<KeyValuePair<string, string>> pointsDefinition = configuration.GetSection("PointsDefinition").AsEnumerable();
            logger.Information("FPL2SCN Convert a KML File / MSFS2020 Fligh Plan to a Scenery Package");

            var t = Parser.Default.ParseArguments<Options>(args)
                .WithParsed(
                    options =>
                {
                    logger.Debug($"Input file: {options.InputFilePath}");

                    if (!string.IsNullOrWhiteSpace(options.OutputFilePath))
                    {
                        if (!Directory.Exists(options.OutputFilePath))
                        {
                            Directory.CreateDirectory(options.OutputFilePath);
                        }

                        logger.Debug($"Output file: {options.OutputFilePath}");
                        outputFileName = options.OutputFilePath + "/visualpoints.xml";
                    }

                    var fileName = options.InputFilePath;

                    if (!File.Exists(fileName))
                    {
                        logger.Error("ERROR: Input File " + fileName + "does not exists. ");
                        System.Environment.Exit(-1);
                    }

                    List<Point>? points = new ();
                    XmlDocument doc = new ();

                    // Load the XML file
                    // TODO: Use try/catch to avoid exceptions if file is not a XML file
                    doc.Load(fileName);

                    // Create a BGL Object
                    Bgl bgl = new (Directory.GetCurrentDirectory() + "/MSFS_Package/aquilon-visualpoints/Scenery/visualpoints/visualpoints/visualpoints.bgl");
                    var numberOfPoints = 0;

                    IXmlFile? xmlFile = null;

                    // Identify the type of file
                    if (KmlFile.IsType(doc))
                    {
                        logger.Information("KML FORMAT DETECTED");
                        xmlFile = new KmlFile(doc);
                    }
                    else if (FplFile.IsType(doc))
                    {
                        logger.Information("FPL FORMAT DETECTED");
                        xmlFile = new FplFile(doc);
                    }
                    else
                    {
                        logger.Error("FILE FORMAT NOT IDENTIFIED");
                        System.Environment.Exit(-1);
                    }

                    if (xmlFile != null)
                    {
                        points = xmlFile.GetPoints(pointsDefinition);

                        if (points != null && points.Count > 0)
                        {
                            numberOfPoints = bgl.AddObjects(points);
                        }
                    }

                    logger.Information("Parsed XML File. Found {0} User points", numberOfPoints);

                    // With -x we can choose to create the XML file to use the MSFS compiler
                    // We can use that to validate the generated BGL object is the same as
                    // the generated by the MSFS compiler
                    if (options.CreateXML)
                    {
                        CreateXML(points, pointsDefinition, outputFileName);
                    }

                    // Create the BGL file in the MSFS scenery Package
                    logger.Information("Generating BGL File");
                    bgl.BuildBGLFile();

                    logger.Information("Done");
                });

            logger.Information("Press any key to exit.....");
            ConsoleKeyInfo keyInfo = Console.ReadKey(true);
        }
    }
}